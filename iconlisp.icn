global kLPar
global kRPar
global kQuote
global kNil
global sym_table
global sym_t
global sym_quote
global sym_if
global sym_lambda
global sym_defun
global sym_setq
global g_env

procedure safeCar(obj)
    if obj["tag"] == "cons" then
        return obj["car"]
    else
        return kNil
end

procedure safeCdr(obj)
    if obj["tag"] == "cons" then
        return obj["cdr"]
    else
        return kNil
end

procedure makeNum(num)
    local obj
    obj := table()
    obj["tag"] := "num"
    obj["data"] := num
    return obj
end

procedure makeSym(str)
    local obj
    if /sym_table[str] then {
        obj := table()
        obj["tag"] := "sym"
        obj["data"] := str
        sym_table[str] := obj
    }
    return sym_table[str]
end

procedure makeError(str)
    local obj
    obj := table()
    obj["tag"] := "error"
    obj["data"] := str
    return obj
end

procedure makeCons(a, d)
    local obj
    obj := table()
    obj["tag"] := "cons"
    obj["car"] := a
    obj["cdr"] := d
    return obj
end

procedure makeSubr(id)
    local obj
    obj := table()
    obj["tag"] := "subr"
    obj["id"] := id
    return obj
end

procedure makeExpr(args, env)
    local obj
    obj := table()
    obj["tag"] := "expr"
    obj["args"] := safeCar(args)
    obj["body"] := safeCdr(args)
    obj["env"] := env
    return obj
end

procedure nreverse(lst)
    local ret, tmp
    ret := kNil
    while lst["tag"] == "cons" do {
        tmp := lst["cdr"]
        lst["cdr"] := ret
        ret := lst
        lst := tmp
    }
    return ret
end

procedure pairlis(lst1, lst2)
    local ret
    ret := kNil
    while lst1["tag"] == "cons" & lst2["tag"] == "cons" do {
        ret := makeCons(makeCons(lst1["car"], lst2["car"]), ret)
        lst1 := lst1["cdr"]
        lst2 := lst2["cdr"]
    }
    return nreverse(ret)
end

procedure isSpace(c)
    if c == "\t" | c == "\l" | c == "\n" | c == " " then
        return c
    else
        fail
end

procedure isDelimiter(c)
    if c == kLPar | c == kRPar | c == kQuote | isSpace(c) then
        return c
    else
        fail
end

procedure skipSpaces(str)
    local i
    i := 1
    while (str[i]) do {
        if not isSpace(str[i]) then return str[i:0]
        i +:= 1
    }
    return ""
end

procedure makeNumOrSym(str)
    if integer(str) then
        return makeNum(integer(str))
    else
        return makeSym(str)
end

procedure readAtom(str)
    local nxt, i
    nxt := ""
    i := 1
    while (str[i]) do {
        if isDelimiter(str[i]) then {
            nxt := str[i:0]
            str := str[1:i]
            break
        }
        i +:= 1
    }
    return [makeNumOrSym(str), nxt]
end

procedure read1(str)
    local tmp
    str := skipSpaces(str)
    if str == "" then
        return [makeError("empty input"), ""]
    else if str[1] == kRPar then
        return [makeError("invalid syntax: " || str), ""]
    else if str[1] == kLPar then
        return readList(str[2:0])
    else if str[1] == kQuote then {
        tmp := read1(str[2:0])
        return [makeCons(sym_quote, makeCons(tmp[1], kNil)), tmp[2]]
    }
    else
        return readAtom(str)
end

procedure readList(str)
    local ret, tmp
    ret := kNil
    while 1 do {
        str := skipSpaces(str)
        if str == "" then
            return [makeError("unfinished parenthesis"), ""]
        else if str[1] == kRPar then
            break
        tmp := read1(str)
        if tmp[1]["tag"] == "error" then
            return tmp
        ret := makeCons(tmp[1], ret)
        str := tmp[2]
    }
    return [nreverse(ret), str[2:0]]
end

procedure printObj(obj)
    local tag
    tag := obj["tag"]
    if tag == "nil" then
        return "nil"
    else if tag == "num" | tag == "sym" then
        return obj["data"]
    else if tag == "error" then
        return "<error: " || obj["data"] || ">"
    else if tag == "cons" then
        return printList(obj)
    else if tag == "subr" then
        return "<subr>"
    else if tag == "expr" then
        return "<expr>"
    else
        return "<unknown>"
end

procedure printList(obj)
    local ret, first
    ret := ""
    first := 1
    while obj["tag"] == "cons" do {
        if first = 1 then
            first := 0
        else
            ret ||:= " "
        ret ||:= printObj(obj["car"])
        obj := obj["cdr"]
    }
    if obj === kNil then
        return "(" || ret || ")"
    else
        return "(" || ret || " . " || printObj(obj) || ")"
end

procedure findVar(sym, env)
    local alist
    while env["tag"] == "cons" do {
        alist := env["car"]
        while alist["tag"] == "cons" do {
            if alist["car"]["car"] === sym then
                return alist["car"]
            alist := alist["cdr"]
        }
        env := env["cdr"]
    }
    return kNil
end

procedure addToEnv(sym, val, env)
    env["car"] := makeCons(makeCons(sym, val), env["car"])
end

procedure eval(obj, env)
    local tag, bind, op, args, c, expr, sym, val
    tag := obj["tag"]
    if tag == "nil" | tag == "num" | tag == "error" then
        return obj
    else if tag == "sym" then {
        bind := findVar(obj, env)
        if bind === kNil then
            return makeError(obj["data"] || " has no value")
        return bind["cdr"]
    }
    op := safeCar(obj)
    args := safeCdr(obj)
    if op === sym_quote then
        return safeCar(args)
    else if op === sym_if then {
        c := eval(safeCar(args), env)
        if c["tag"] == "error" then return c
        else if c === kNil then
            return eval(safeCar(safeCdr(safeCdr(args))), env)
        else
            return eval(safeCar(safeCdr(args)), env)
    }
    else if op === sym_lambda then
        return makeExpr(args, env)
    else if op === sym_defun then {
        expr := makeExpr(safeCdr(args), env)
        sym := safeCar(args)
        addToEnv(sym, expr, g_env)
        return sym
    }
    else if op === sym_setq then {
        val := eval(safeCar(safeCdr(args)), env)
        sym := safeCar(args)
        bind := findVar(sym, env)
        if bind === kNil then
            addToEnv(sym, val, g_env)
        else
            bind["cdr"] := val
        return val
    }
    return apply(eval(op, env), evlis(args, env))
end

procedure evlis(lst, env)
    local ret, elm
    ret := kNil
    while (lst["tag"] == "cons") do {
        elm := eval(lst["car"], env)
        if elm["tag"] == "error" then return elm
        ret := makeCons(elm, ret)
        lst := lst["cdr"]
    }
    return nreverse(ret)
end

procedure progn(body, env)
    local ret
    while body["tag"] == "cons" do {
        ret := eval(body["car"], env)
        body := body["cdr"]
    }
    return ret
end

procedure apply(fn, args)
    if fn["tag"] == "error" then
        return fn
    else if args["tag"] == "error" then
        return args
    else if fn["tag"] == "subr" then
        return subrCall(fn["id"], args)
    else if fn["tag"] == "expr" then
        return progn(fn["body"], makeCons(pairlis(fn["args"], args), fn["env"]))
    else
        return makeError(printObj(fn) || " is not function")
end

procedure subrCall(id, args)
    if id = 1 then
        return subrCar(args)
    else if id = 2 then
        return subrCdr(args)
    else if id = 3 then
        return subrCons(args)
    else
        return makeError("unknown subr")
end

procedure subrCar(args)
    return safeCar(safeCar(args))
end

procedure subrCdr(args)
    return safeCdr(safeCar(args))
end

procedure subrCons(args)
    return makeCons(safeCar(args), safeCar(safeCdr(args)))
end

procedure init()
    kLPar := "("
    kRPar := ")"
    kQuote := "'"

    kNil := table()
    kNil["tag"] := "nil";

    sym_table := table(false)
    sym_table["nil"] := kNil

    sym_t := makeSym("t")
    sym_quote := makeSym("quote")
    sym_if := makeSym("if")
    sym_lambda := makeSym("lambda")
    sym_defun := makeSym("defun")
    sym_setq := makeSym("setq")

    g_env := makeCons(kNil, kNil)
    addToEnv(sym_t, sym_t, g_env)
    addToEnv(makeSym("car"), makeSubr(1), g_env)
    addToEnv(makeSym("cdr"), makeSubr(2), g_env)
    addToEnv(makeSym("cons"), makeSubr(3), g_env)
end

procedure main(args)
    local exp
    init()
    while (exp := read1(read())) do {
        write(printObj(eval(exp[1], g_env)))
    }
end
